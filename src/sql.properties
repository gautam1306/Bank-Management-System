db.url = jdbc:postgresql://localhost:5432/Bank
db.user= postgres
db.password = root
db.validateCustomer = select profile.profile_id,profile.name,profile.aadhaar_number,profile.date_of_birth,gender.gender,profile.mobile_number,profile.address_house,profile.address_street,profile.address_district,profile.address_state,profile.address_pin_code,profile.pan_card from profile,customer,gender where customer.customer_id=? and customer.password=? and profile.profile_id=customer.profile_id and gender.gender_id = profile.gender
db.getAccounts = select Accounts.account_number,bankbranches.branch_ifsc,Accounts.balance,Accounts.today_transfer,accounttype.account_type,Accounts.transfer_limit,Accounts.overdraft from Accounts,accounttype,bankbranches where Accounts.customer_id=? and Accounts.account_type = accounttype.account_type_id and bankbranches.branch_id = accounts.branch_id
db.transferAmount = update accounts set balance=balance+? where accounts.account_number=?
db.insertTransfer = insert into transactions(from_account_number,to_account_number,transfer_amount,date_of_transfer,description,mode_of_transaction) values(?,?,?,CURRENT_DATE,?,?)
db.getBalance = select balance from accounts where account_number= ?
db.deleteRecurringDeposit = delete from recurringdeposit where deposit_id=?
db.getRecurringDeposit = select recurringdeposit.deposit_id,recurringdeposit.monthly_investment_amount,recurringdeposit.account_number,recurringdeposit.maturity_period,recurringdeposit.start_date,recurringdeposit.deposit_amount,recurringdeposit.total_interest_amount, recurringdepositinterestrate.interest_rate from recurringdeposit,recurringdepositinterestrate,accounts where recurringdeposit.account_number=accounts.account_number and accounts.customer_id=? and recurringdeposit.interest_rate_id= recurringdepositinterestrate.interest_rate_id
db.getAccountInfo = select * from Accounts where Account_Number = ? and status = true
db.updateTransfer = update accounts set balance=balance+?,today_transfer=today_transfer+?  where accounts.account_number=?
db.updateTransferAmount = update accounts set today_transfer=0
db.getTransaction = select transaction_id,from_account_number,to_account_number,to_char(date_of_transfer,'DD-MM-YYYY'),transfer_amount,mode_of_transaction,transfer_type,description,mode_of_transaction,date_of_transfer from transactions where from_account_number =? or to_account_number =? order by transaction_id desc
db.addIntrestRecurringDeposit = update recurringdeposit set total_interest_amount=total_interest_amount+(deposit_amount*recurringdepositinterestrate.interst_rate/1200) from recurringdeposit_interst_rate where recurringdepositinterestrate.interest_rate_id= recurringdeposit.interest_rate_id;
db.addMonthlyinvestment = update recurringdeposit set deposit_amount = deposit_amount+monthly_investment_amount where deposit_id=?
db.debitamountRecurringDeposit = update accounts set accounts.balance = accounts.balance-recurringdeposit.amount from recurringdeposit where accounts.account_number = recurringdeposit.account_number
db.getAccountnumberRecurringDeposit = select recurringdeposit.account_number,recurringdeposit.monthly_investment_amount,accounts.balance,recurringdeposit.deposit_id from recurringdeposit,accounts where recurringdeposit.account_number = accounts.account_number; 
db.updateBeneficiaryTransfer= update public.beneficiary set transfer = 0
db.getFixedDeposit = select fixeddepositinterestrates.interest_rate,deposit_id,maturity_date,account_number,customer_id,date_of_deposit from fixeddepositinterestrates,fixeddeposits where fixeddeposits.customer_id=? and fixeddeposits.interest_id= fixeddepositinterestrates.interst_id
db.addRecurringDeposit = insert into recurringDeposit(account_number,interest_rate_id,maturity_period,monthly_investment_amount) values(?,(select recurringdepositinterestrate.interest_rate_id from recurringdepositinterestrate where time_of_maturity_upper_limit>= ? and time_of_maturity_lower_limit<=?),CURRENT_DATE +interval '1 month'*?,?)
db.addFixedDeposit = insert into fixeddeposits(account_number,interest_id,maturity_date,amount) values(?,(select interest_rate_id from fixeddepositinterestrates where time_of_maturity_upper>= ? and time_of_maturity_lower<=?),CURRENT_DATE +interval '1 month'*?,?)
db.transferFund = update accounts set balance=balance+? where accounts.account_number=? and balance-?>=0
db.getFixedDepositDetail = select amount,current_date-date_of_deposit as days,account_number from fixeddeposits where deposit_id = ?
db.deleteFixedDeposit = delete from fixeddeposits where deposit_id=?
db.addProfile = insert into profile(name,aadhaar_number,pancard,date_of_birth,gender,mobile_number,address_house,address_street,address_district,address_state,address_pin_code) values(?,?,?,to_date(?,'YYYY-MM-DD'),?,?,?,?,?,?,?)
db.getProfileId = select profile_id from profile where aadhaar_number = ?
db.addcustomer = insert into customer(password,profile_id) values(?,?);
db.addAccount = insert into accounts(customer_id,branch_id,account_type,transfer_limit,overdraft) select ?,?,?,?,? where not exists (select 1 from accounts where customer_id = ?  and account_type=2)
db.validateEmployee = select password,employee_role from employee where employee_id=?
db.getCustomerid = select customer_id from customer where profile_id=?
db.deleteAccount = update accounts set status=false where account_number=?
db.checkBranch = select * from "bankBranches" where bank_ifsc = ?
db.getBranches = select * from bankbranches
db.addBranch = insert into bankbranches(branch_ifsc,branch_name,address_building,address_street,address_district,address_state,address_pin_code) values(?,?,?,?,?,?,?)
db.getBeneficiaryDetails = select beneficiary.beneficiaryaccount,beneficiary.transferlimit,beneficiary.transfer,beneficiary.nickname,bankbranches.branch_ifsc from beneficiary,bankbranches,accounts where  beneficiary.customerid = ? and beneficiary.status=true and accounts.account_number=beneficiary.beneficiaryaccount and accounts.branch_id=bankbranches.branch_id
db.getrequestId = select request_id,account_number from banktobankbeneficiary where account_number=? and status is null
db.updaterequestStatus = update banktobankbeneficiary set status=? where request_id = ?
db.getrequestList =  select request_id,account_number from banktobankbeneficiary where ifsc=? and status is null
db.getCardCompany = select company_id,company_name from cardcompany;
db.insertcard = insert into cards(transaction_limit,company_id,account_number) values(?,?,?)
db.getCardid = select cards.card_detail_id,cards.status,cards.transaction_limit,cardcompany.company_name,card_number,to_char(expiry_date,'MM-YYYY') as expiry_date from cards,cardcompany where account_number = ? and cardcompany.company_id= cards.company_id
db.setCardIdToAccounts = update accounts set card_id = ? where account_number = ?
db.updatePassword = update accounts set password =? where customer_id
db.getManagerDetails = select name,aadhaar_number,pan_card,to_char(date_of_birth,'DD-MM-YYYY') as date_of_birth,gender.gender,mobile_number,address_house,address_street,address_district,address_pin_code,address_state from employee,gender where employee_id=?
db.addEmployee = insert into employee(name,aadhaar_number,pan_card,date_of_birth,gender,mobile_number,password,employee_role,address_house,address_street,address_district,address_state,address_pin_code) values(?,?,?,to_date(?,'YYYY-MM-DD'),?,?,?,?,?,?,?,?,?)
db.addEmployeeBranchRelation = insert into employeebranchrelation(employee_id,branch_id) values((select employee_id from employee where aadhaar_number = ? ),(select branch_id from bankbranches where branch_ifsc = ?))
db.getEmployeeDetails = select bankbranches.branch_ifsc,employee.name,employee.aadhaar_number,employee.pan_card,to_char(employee.date_of_birth,'DD-MM-YYYY') as date_of_birth,employee.gender,employee.mobile_number,employee.password,employee.employee_role,employee.address_house,employee.address_street,employee.address_district,employee.address_state,employee.address_pin_code from employee,employeebranchrelation,bankbranches where employee.employee_id = ? and employee.employee_id = employeebranchrelation.employee_id and employeebranchrelation.branch_id = bankbranches.branch_id
db.getLoanTypes = select loan_type_id,loan_type,interest_rate from loantype;
db.addLoanAccount = insert into loanaccounts(account_number,loan_amount,loan_interest_rate,date_of_approval,maturity_period,payable_amount,loan_type) values(?,?,?,current_date,?,?,?)
db.updateLoan = update loanaccounts set interest_amount= ?,payable_amount=? where loan_id=?
db.getLoan = select interest_amount,payable_amount from loanaccounts where loan_id=?
db.deactivateLoan = update loanaccounts set account_status =false,maturity_date = current_date where payable_amount=0 and account_status=true ;
db.addLoanIntrest = update loanaccounts set interest_amount = interest_amount+(payable_amount*(loan_interest_rate/1200)) where account_status = true
db.getLoanHistory = select loan_id,loan_amount,to_char(date_of_approval,'DD-MM-YYYY') as date_of_approval,to_char(maturity_date,'DD-MM-YYYY') as maturity_date from loanaccounts,accounts where loanaccounts.account_number = accounts.account_number and accounts.customer_id= ?
db.getActiveLoanAccounts = select loan_id,account_number,payable_amount,loan_interest_rate,date_of_approval+interval '1 month'*maturity_period-current_date from loanaccounts where account_status=true
db.getBeneficiary = select * from beneficiary where  accountnumber = ? and beneficiaryaccount=?
db.updateBenificiary = update beneficiary set transfer=transfer+? where customerid =? and beneficiaryaccount=?
db.addBeneficiary =insert into beneficiary(customerid,beneficiaryaccount,transferlimit,nickname,bankid) values(?,?,?,?,(select branch_id from accounts where ?=account_number))
db.getLoanAccounts = select loan_id,accounts.account_number,loan_amount,loan_interest_rate,interest_amount,payable_amount,loantype.loan_type,date_of_approval+interval '1 months'*maturity_period as lastdateofpayment from loanaccounts,loantype,accounts where loantype.loan_type_id=loanaccounts.loan_type and loanaccounts.account_number=accounts.account_number AND accounts.customer_id = ?









